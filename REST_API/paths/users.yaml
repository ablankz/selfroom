users:
  get:
    summary: 複数ユーザーの取得
    description: 複数ユーザーの取得
    # security: []
    tags: ["users"]
    parameters:
      - $ref: "../components/parameters/common-header.yaml#/LangHeader"
      - $ref: "../components/parameters/get-common-parameter.yaml#/LimitParam"
      - $ref: "../components/parameters/get-common-parameter.yaml#/OffsetParam"
      - $ref: "../components/parameters/get-common-parameter.yaml#/OrderOptParam"
      - name: order
        in: query
        description: オーダー項目
        schema:
          type: string
          enum: ["create", "name", "follower"]
          default: "create"
      - $ref: "../components/parameters/get-common-parameter.yaml#/WithTotalCountParam"
    responses:
      "200":
        $ref: "../components/responses/endpoints/user.yaml#/UsersResponse"
      "200(with total_count)":
        $ref: "../components/responses/endpoints/user.yaml#/UsersWithTotalCountResponse"
      "4XX":
        $ref: "../components/responses/4xx-bad-request-response.yaml#/4XX-BadRequestResponse"
      "5XX":
        $ref: "../components/responses/5xx-server-error-response.yaml#/5XX-ServerErrorResponse"
  post:
    summary: ユーザーの新規登録
    description: ユーザーの新規登録(+ログイン)
    # security: []
    tags: ["users"]
    parameters:
        - $ref: "../components/parameters/common-header.yaml#/LangHeader"
    requestBody:
      description: 新規登録データ
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required: [loginId, password, passwordConfirmation, nickname]
            properties:
              loginId: { type: string, default: "admin@admin.admin" }
              password:
                { type: string, format: "password", default: "admintest" }
              passwordConfirmation:
                { type: string, format: "password", default: "admintest" }
              nickname: { type: string, default: "作成 ユーザー" }
              profilePhoto:
                type: string
                format: binary
    responses:
      "200":
        $ref: "../components/responses/endpoints/auth.yaml#/JwtTokenResponse"
      "4XX":
        $ref: "../components/responses/4xx-bad-request-response.yaml#/4XX-BadRequestResponse"
      "5XX":
        $ref: "../components/responses/5xx-server-error-response.yaml#/5XX-ServerErrorResponse"
  put:
    summary: ユーザー情報の更新
    description: ユーザー情報の更新
    # security: []
    tags: ["users"]
    parameters:
        - $ref: "../components/parameters/common-header.yaml#/LangHeader"
    requestBody:
      description: 更新データ
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required: [nickname]
            properties:
              nickname: { type: string, default: "更新後 ユーザー" }
              profilePhoto:
                type: string
                format: binary
              country:
                type: string
                example: Japan
              description:
                type: string
                example: "よろしくおねがいします"
              email:
                type: string
                example: "test@test.test"
              company:
                type: string
                example: "Selfroom Inc."
              role:
                type: string
                example: "Backend Engineer, Web Designer"
              school:
                type: string
                example: "Kansai University"
    responses:
      "200":
        $ref: "../components/responses/empty-data-response.yaml#/EmptyDataResponse"
      "4XX":
        $ref: "../components/responses/4xx-bad-request-response.yaml#/4XX-BadRequestResponse"
      "5XX":
        $ref: "../components/responses/5xx-server-error-response.yaml#/5XX-ServerErrorResponse"
  delete:
    summary: 認証ユーザーの削除
    description: 認証ユーザーの削除
    # security: []
    tags: ["users"]
    parameters:
        - $ref: "../components/parameters/common-header.yaml#/LangHeader"
    responses:
      "200":
        $ref: "../components/responses/empty-data-response.yaml#/EmptyDataResponse"
      "4XX":
        $ref: "../components/responses/4xx-bad-request-response.yaml#/4XX-BadRequestResponse"
      "5XX":
        $ref: "../components/responses/5xx-server-error-response.yaml#/5XX-ServerErrorResponse"
users_{user_id}:
  get:
    summary: ユーザーの取得
    description: ユーザーの取得
    parameters:
      - $ref: "../components/parameters/common-header.yaml#/LangHeader"
      - $ref: "#/components/parameters/UserId"
    # security: []
    tags: ["users"]
    responses:
      "200":
        $ref: "../components/responses/endpoints/user.yaml#/UserResponse"
      "4XX":
        $ref: "../components/responses/4xx-bad-request-response.yaml#/4XX-BadRequestResponse"
      "5XX":
        $ref: "../components/responses/5xx-server-error-response.yaml#/5XX-ServerErrorResponse"

components:
  parameters:
    UserId:
      name: user_id
      in: path
      description: ユーザーID
      required: true
      schema:
        type: string
        example: "9a5fb3cd-80c7-4d2b-971f-2f1a0ef782f7"
